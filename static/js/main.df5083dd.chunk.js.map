{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NUM_BOXES","Box","style","width","height","display","backgroundColor","color","allColors","App","props","boxes","Array","fill","map","getRandomColor","state","setInterval","slice","Math","floor","random","length","setState","colorIndex","this","box","i","key","className","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGMA,G,MAAY,IAEZC,EAAM,SAAC,GAAe,IACrBC,EAAQ,CACbC,MAAO,QACPC,OAAQ,QACRC,QAAS,eACTC,gBALyB,EAAZC,OAOd,OAAO,yBAAKL,MAAOA,KAGdM,EAAY,CACjB,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,eAGKC,E,YACL,WAAYC,GAAQ,IAAD,sBAClB,4CAAMA,IAEN,IAAMC,EAAQC,MAAMZ,GAClBa,OACAC,IAAI,EAAKC,eAFG,gBAHI,OAMlB,EAAKC,MAAQ,CAAEL,SAEfM,aAAY,WACX,IAAMN,EAAQ,EAAKK,MAAML,MAAMO,QAE/BP,EADkBQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAMW,SAChC,EAAKP,iBACxB,EAAKQ,SAAS,CAAEZ,YACd,KAbe,E,8EAgBlB,IAAIa,EAAaL,KAAKC,MAAMD,KAAKE,SAAWb,EAAUc,QACtD,OAAOd,EAAUgB,K,+BAIjB,IAAMb,EAAQc,KAAKT,MAAML,MAAMG,KAAI,SAACY,EAAKC,GAAN,OAAY,kBAAC,EAAD,CAAKC,IAAKD,EAAGpB,MAAOmB,OACnE,OAAO,yBAAKG,UAAU,OAAOlB,O,GAvBbmB,aA2BlBrB,EAAIsB,aAAe,CAClBvB,UAAW,CACV,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,gBAIaC,QC5UKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.df5083dd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst NUM_BOXES = 21;\n\nconst Box = ({ color }) => {\n const style = {\n  width: \"180px\",\n  height: \"180px\",\n  display: \"inline-block\",\n  backgroundColor: color\n };\n return <div style={style} />;\n};\n\nconst allColors = [\n \"AliceBlue\",\n \"AntiqueWhite\",\n \"Aqua\",\n \"Aquamarine\",\n \"Azure\",\n \"Beige\",\n \"Bisque\",\n \"Black\",\n \"BlanchedAlmond\",\n \"Blue\",\n \"BlueViolet\",\n \"Brown\",\n \"BurlyWood\",\n \"CadetBlue\",\n \"Chartreuse\",\n \"Chocolate\",\n \"Coral\",\n \"CornflowerBlue\",\n \"Cornsilk\",\n \"Crimson\",\n \"Cyan\",\n \"DarkBlue\",\n \"DarkCyan\",\n \"DarkGoldenRod\",\n \"DarkGray\",\n \"DarkGrey\",\n \"DarkGreen\",\n \"DarkKhaki\",\n \"DarkMagenta\",\n \"DarkOliveGreen\",\n \"Darkorange\",\n \"DarkOrchid\",\n \"DarkRed\",\n \"DarkSalmon\",\n \"DarkSeaGreen\",\n \"DarkSlateBlue\",\n \"DarkSlateGray\",\n \"DarkSlateGrey\",\n \"DarkTurquoise\",\n \"DarkViolet\",\n \"DeepPink\",\n \"DeepSkyBlue\",\n \"DimGray\",\n \"DimGrey\",\n \"DodgerBlue\",\n \"FireBrick\",\n \"FloralWhite\",\n \"ForestGreen\",\n \"Fuchsia\",\n \"Gainsboro\",\n \"GhostWhite\",\n \"Gold\",\n \"GoldenRod\",\n \"Gray\",\n \"Grey\",\n \"Green\",\n \"GreenYellow\",\n \"HoneyDew\",\n \"HotPink\",\n \"IndianRed\",\n \"Indigo\",\n \"Ivory\",\n \"Khaki\",\n \"Lavender\",\n \"LavenderBlush\",\n \"LawnGreen\",\n \"LemonChiffon\",\n \"LightBlue\",\n \"LightCoral\",\n \"LightCyan\",\n \"LightGoldenRodYellow\",\n \"LightGray\",\n \"LightGrey\",\n \"LightGreen\",\n \"LightPink\",\n \"LightSalmon\",\n \"LightSeaGreen\",\n \"LightSkyBlue\",\n \"LightSlateGray\",\n \"LightSlateGrey\",\n \"LightSteelBlue\",\n \"LightYellow\",\n \"Lime\",\n \"LimeGreen\",\n \"Linen\",\n \"Magenta\",\n \"Maroon\",\n \"MediumAquaMarine\",\n \"MediumBlue\",\n \"MediumOrchid\",\n \"MediumPurple\",\n \"MediumSeaGreen\",\n \"MediumSlateBlue\",\n \"MediumSpringGreen\",\n \"MediumTurquoise\",\n \"MediumVioletRed\",\n \"MidnightBlue\",\n \"MintCream\",\n \"MistyRose\",\n \"Moccasin\",\n \"NavajoWhite\",\n \"Navy\",\n \"OldLace\",\n \"Olive\",\n \"OliveDrab\",\n \"Orange\",\n \"OrangeRed\",\n \"Orchid\",\n \"PaleGoldenRod\",\n \"PaleGreen\",\n \"PaleTurquoise\",\n \"PaleVioletRed\",\n \"PapayaWhip\",\n \"PeachPuff\",\n \"Peru\",\n \"Pink\",\n \"Plum\",\n \"PowderBlue\",\n \"Purple\",\n \"Red\",\n \"RosyBrown\",\n \"RoyalBlue\",\n \"SaddleBrown\",\n \"Salmon\",\n \"SandyBrown\",\n \"SeaGreen\",\n \"SeaShell\",\n \"Sienna\",\n \"Silver\",\n \"SkyBlue\",\n \"SlateBlue\",\n \"SlateGray\",\n \"SlateGrey\",\n \"Snow\",\n \"SpringGreen\",\n \"SteelBlue\",\n \"Tan\",\n \"Teal\",\n \"Thistle\",\n \"Tomato\",\n \"Turquoise\",\n \"Violet\",\n \"Wheat\",\n \"White\",\n \"WhiteSmoke\",\n \"Yellow\",\n \"YellowGreen\"\n];\n\nclass App extends Component {\n constructor(props) {\n  super(props);\n  // this.getRandomColor = this.getRandomColor.bind(this);\n  const boxes = Array(NUM_BOXES)\n   .fill()\n   .map(this.getRandomColor, this);\n  this.state = { boxes };\n\n  setInterval(() => {\n   const boxes = this.state.boxes.slice();\n   const randIndex = Math.floor(Math.random() * boxes.length);\n   boxes[randIndex] = this.getRandomColor();\n   this.setState({ boxes });\n  }, 300);\n }\n getRandomColor() {\n  let colorIndex = Math.floor(Math.random() * allColors.length);\n  return allColors[colorIndex];\n }\n\n render() {\n  const boxes = this.state.boxes.map((box, i) => <Box key={i} color={box} />);\n  return <div className=\"App\">{boxes}</div>;\n }\n}\n\nApp.defaultProps = {\n allColors: [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"Black\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenRod\",\n  \"DarkGray\",\n  \"DarkGrey\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"Darkorange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkSlateGrey\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DimGrey\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"GoldenRod\",\n  \"Gray\",\n  \"Grey\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenRodYellow\",\n  \"LightGray\",\n  \"LightGrey\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSlateGrey\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquaMarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenRod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"SlateGrey\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\"\n ]\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}